install.packages('lubridate')
install.packages('sqldf')
library(lubridate)
library(sqldf)

train = read.csv("training.csv")

convert = function(basedata){
  basedata = basedata[which(basedata$agentSeconds >0),]
  basedata$time<-ymd_hms(basedata$contactStart, tz = "America/Denver")
  basedata$timerounded<-floor_date(basedata$time, unit = "30 min")
  
  calls<-sqldf('SELECT timerounded, AVG(agentSeconds) as "handletime" FROM basedata GROUP BY timerounded')
  timeNumeric=as.numeric(hm(format(calls$timerounded, format="%H:%M")))/3600
  workHour=timeNumeric-7
  day=wday(calls$timerounded, label = TRUE)
  week=isoweek(calls$timerounded)-18
  
  df=data.frame(calls,timeNumeric,workHour,day,week)
  df$mon=ifelse(df$day=='Mon',1,0)
  df$tue=ifelse(df$day=='Tue',1,0)
  df$wed=ifelse(df$day=='Wed',1,0)
  df$thu=ifelse(df$day=='Thu',1,0)
  df$fri=ifelse(df$day=='Fri',1,0)
  return(df)
}

#converted data for 30min intervals
df=convert(train)
plot(df$timeNumeric,df$handletime,
     xlab="Time of Day (hour MST)",
     ylab="Avg Handle Time (seconds)",
     main="Handle Time vs. Time of Day (30 minute intervals)")

#split data into grind and crunch time
grind=sqldf("SELECT * FROM df WHERE timeNumeric<18")
plot(grind$timeNumeric,grind$handletime,
     xlab="Time of Day (hour MST)",
     ylab="Avg Handle Time (in )",
     main="Handle Time vs. Time of Day (30 minute intervals)")
df$crunchTime=(df$timeNumeric-18)
crunch=sqldf("SELECT * FROM df WHERE timeNumeric>=18")
plot(crunch$timeNumeric,crunch$handletime,
     xlab="Time of Day (hour MST)",
     ylab="Avg Handle Time (seconds)",
     main="Handle Time vs. Time of Day (30 minute intervals)")
df$g=ifelse(df$timeNumeric<18,1,0)
df$c=ifelse(df$timeNumeric>=18,1,0)

#variable selection
library(leaps)
regfit.bwd = regsubsets(handletime~(workHour+I(workHour^2)+I(workHour^3)+I(workHour^4)
                                    +mon+tue+wed+thu+fri+week)^2,
                        data=grind, method = 'backward',nvmax=12)
reg.summary=summary(regfit.bwd)
plot(reg.summary$adjr2,
     xlab = 'Number of Variables', 
     ylab='Adjusted R^2',type = 'l',
     main='Backward Selection Over All Variables And Interactions')
#looks like 6 variables is good 
points(6, reg.summary$adjr2[6], 
       col='red',cex = 2, pch = 20)
#what are the 8 selected variables
print(reg.summary)

#does the day really not matter? 
boxplot(grind$handletime~grind$day,
        xlab="Day of Week",
        ylab="Handle Time (seconds)",
        main="Average Handle Time (30min intervals) vs. Day")

#best subset over backward selection
regfit.best = regsubsets(handletime~workHour+I(workHour^2)+I(workHour^3)+I(workHour^4)+I(workHour^5)
                         +I(workHour^6)+I(workHour^7),data=grind)
reg.summary = summary(regfit.best)
plot(reg.summary$adjr2,
     xlab = 'Number of Variables', 
     ylab='Adjusted R^2',
     main='Best Subset Over Selected Variables',
     type = 'l')
points(4, reg.summary$adjr2[4], 
       col='red',cex = 2, pch = 20)
print(reg.summary)

#random training index
set.seed(1)
trainIndex = sample(c(1:dim(grind)[1]), .7*dim(grind)[1], replace = FALSE)

#fit best subset model
fit=lm(handletime~workHour+I(workHour^2)+I(workHour^3)+I(workHour^4),data=grind,subset=trainIndex)
testing=grind[-trainIndex,"handletime"]
yhat=predict(fit,grind[-trainIndex,])
error=mean((yhat-testing)^2)
error

#final model includes grind and crunch and no common intercept
final=lm(handletime~0+g+workHour:g+I(workHour^2):g+I(workHour^3):g+I(workHour^4):g
         +c+crunchTime:c,data=df)

#check correct coefficients
fit.grind=lm(handletime~workHour+I(workHour^2)+I(workHour^3)+I(workHour^4),data=grind)
fit.crunch=lm(handletime~crunchTime,data=crunch)
summary(final)
summary(fit.grind)
summary(final)
summary(fit.crunch)

#visualize model
timelims=range(df$workHour)
time.grid=seq(from=timelims[1],to=timelims[2])
handlelims=range(grind$handletime)
handle.grid=seq(from=handlelims[1],to=handlelims[2])
plot(df$workHour,df$handletime,xlim=timelims, ylim=handlelims,
     cex=.5,col="darkgrey",
     xlab="Hour of Day (0=7 AM MST)",
     ylab="Avg Agent Seconds (per 30 min)")
x = seq(0,10.5,0.5)
summary(fit.grind)
y = 495.92 + 129.99*x - 35.29*(x^2) + 3.84995*(x^3) - 0.14404*(x^4) 
lines(x,y,col="blue",lwd=2)
xc = seq(10.5,12.5,0.5)
summary(fit.crunch)
yc=619.29-102.82*(xc-11)
lines(xc,yc,col="red",lwd=2)
legend("topright",legend=c("The Grind","Crunch Time"),
       col=c("blue","red"),lty=1,lwd=2,cex=.8)

