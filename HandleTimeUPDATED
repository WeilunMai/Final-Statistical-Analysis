install.packages('lubridate')
install.packages('sqldf')
library(lubridate)
library(sqldf)

train = read.csv("training.csv")

convert = function(basedata){
  
  basedata = basedata[which(basedata$agentSeconds >0),]
  basedata$time<-ymd_hms(basedata$contactStart, tz = "America/Denver")
  basedata$timerounded<-floor_date(basedata$time, unit = "30 min")
  
  calls<-sqldf('SELECT timerounded, AVG(agentSeconds), COUNT(timerounded) as calls FROM basedata GROUP BY timerounded')
  
  x = format(calls$timerounded, format="%H:%M")
  timeNumeric=as.numeric(hm(x))/3600
  
  df= data.frame(calls, 
                 timeNumeric,
                 wday(calls$timerounded, label = TRUE),
                 isoweek(calls$timerounded) - 17)
  names(df) = c('date', 'handleTime','callVolume','timeNumeric','day','weekID')
  df$mon=ifelse(df$day=='Mon',1,0)
  df$tue=ifelse(df$day=='Tue',1,0)
  df$wed=ifelse(df$day=='Wed',1,0)
  df$thu=ifelse(df$day=='Thu',1,0)
  df$fri=ifelse(df$day=='Fri',1,0)
  df$sat=ifelse(df$day=='Sat',1,0)
  df$sun=ifelse(df$day=='Sun',1,0)
  
  df$workhour=df$timeNumeric-7
  
  return(df)
}

hdf=convert(train)
grind=sqldf("SELECT * FROM hdf WHERE timeNumeric<19")
attach(grind)
plot(timeNumeric,handleTime)
grind$workHour=grind$timeNumeric-7
plot(grind$workHour,handleTime)

set.seed(1)
trainIndex = sample(c(1:dim(grind)[1]), .7*dim(grind)[1], replace = FALSE)


fit=glm(handleTime~workHour+I(workHour^2),data=grind,subset=trainIndex)
summary(fit)
testing=grind[-trainIndex,"handleTime"]
yhat=predict(fit,grind[-trainIndex,])
error=mean((yhat-testing)^2)
error

install.packages('gam')
library(gam)
library(splines)

fit.gam1=gam(handleTime~s(workHour,12),data=grind,subset=trainIndex)
yhat=predict(fit.gam1,grind[-trainIndex,])
error=mean((yhat-testing)^2)
error
plot(fit.gam1,se=TRUE,col="blue")

attach(grind)
plot(workHour,handleTime,
     cex=.5,col="darkgrey",xlab="Time of Day (MST)",ylab="Avg Agent Seconds (per 30 min)")
#title (" Smoothing Spline ")
# fitcv=smooth.spline(grind$workHour[trainIndex],grind$handleTime[trainIndex],cv=TRUE)
# fit$df
#lines(fit.smooth.cv,col="red",lwd=2)
#title (" Smoothing Spline ")
fits=smooth.spline(grind$workHour[trainIndex],grind$handleTime[trainIndex],df=12)
lines(fits,col="blue",lwd=2)
legend("topright",legend=c("12 DF"),
       col=c("blue"),lty=1,lwd=2,cex=.8)
par(mfrow=c(1,1))
plot(grind[which<workHour,handleTime,cex=.5,col="darkgrey",xlab="Time of Day (MST)",ylab="Avg Agent Seconds (per 30 min)"])

# yhat=predict(fits,grind[-trainIndex,])
# error=mean((yhat-testing)^2)
# error
# plot(fit.gam1,se=TRUE,col="blue")


fit.gam1=gam(handleTime~s(workHour,12)+mon,data=grind,subset=trainIndex)
yhat=predict(fit.gam1,grind[-trainIndex,])
error=mean((yhat-testing)^2)
error
plot(fit.gam1,se=TRUE,col="blue")


grind$middle = ifelse(mon==1,0,ifelse(fri==1,0,1))

fit=glm(handleTime~workHour:mon+I(workHour^2):mon+I(workHour^3):mon+I(workHour^4):mon+mon
        +workHour:middle+I(workHour^2):middle+I(workHour^3):middle+I(workHour^4):middle+middle
        +workHour:fri+I(workHour^2):fri+I(workHour^3):fri+I(workHour^4):fri+fri,data=grind,subset=trainIndex)
summary(fit)
testing=grind[-trainIndex,"handleTime"]
yhat=predict(fit,grind[-trainIndex,])
error=mean((yhat-testing)^2)
error

fit=glm(handleTime~poly(workHour,7),data=grind,subset=trainIndex)
summary(fit)
testing=grind[-trainIndex,"handleTime"]
yhat=predict(fit,grind[-trainIndex,])
error=mean((yhat-testing)^2)
error

library(leaps)
regfit.bwd = regsubsets(handleTime~(workHour+I(workHour^2)+I(workHour^3)+I(workHour^4)+mon+tue+wed+thu+fri)^2,data=grind,subset=trainIndex, method = 'backward')
reg.summary = summary(regfit.bwd)
print(reg.summary)
#But how many variables should I choose in the model?
which.max(reg.summary$adjr2)
plot(reg.summary$adjr2,xlab = 'Number of variables', 
     ylab='Adjusted R^2',type = 'l')
points(which.max(reg.summary$adjr2), 
       reg.summary$adjr2[which.max(reg.summary$adjr2)], 
       col='red',cex = 2, pch = 20)

names(reg.summary)
par(mfrow=c(1,1))
grind$end = ifelse(mon==0,1,0)

fit=glm(handleTime~poly(workHour,4),data=grind,subset=trainIndex)
summary(fit)
testing=grind[-trainIndex,"handleTime"]
yhat=predict(fit,grind[-trainIndex,])
error=mean((yhat-testing)^2)
error

boxplot(handleTime~day,data=grind)

fit=glm(handleTime~workHour:mon+I(workHour^2):mon+I(workHour^3):mon+I(workHour^4):mon+mon
        +workHour:end+I(workHour^2):end+I(workHour^3):end+I(workHour^4):end+end
        ,data=grind,subset=trainIndex)
summary(fit)
testing=grind[-trainIndex,"handleTime"]
yhat=predict(fit,grind[-trainIndex,])
error=mean((yhat-testing)^2)
error

par(mfrow=c(1,2))
plot(grind$workHour[which(mon==1),],grind[which(mon==1),]$handleTime,grind[which(mon==1),],main = "Monday")
plot(workHour,handleTime,data=grind[which(tue==1),],main = "Tuesday")
plot(workHour,handleTime,data=grind[which(wed==1),],main = "Wednesday")
plot(workHour,handleTime,data=grind[which(thu==1),],main = "Thursday")
plot(workHour,handleTime,data=grind[which(fri==1),],main = "Friday")



library(leaps)
regfit.full = regsubsets(handleTime~workHour+I(workHour^2)+I(workHour^3)+I(workHour^4)+I(workHour^5),data=grind,subset=trainIndex)
reg.summary = summary(regfit.full)
print(reg.summary)
#But how many variables should I choose in the model?
which.max(reg.summary$adjr2)
plot(reg.summary$adjr2,xlab = 'Number of variables', 
     ylab='Adjusted R^2',type = 'l')
points(which.max(reg.summary$adjr2), 
       reg.summary$adjr2[which.max(reg.summary$adjr2)], 
       col='red',cex = 2, pch = 20)



fit=glm(handleTime~workHour+I(workHour^3)+I(workHour^4)+I(workHour^5),data=grind,subset=trainIndex)
summary(fit)
testing=grind[-trainIndex,"handleTime"]
yhat=predict(fit,grind[-trainIndex,])
error=mean((yhat-testing)^2)
error


regfit.fwd = regsubsets(handleTime~workHour+I(workHour^2)+I(workHour^3)+I(workHour^4)+I(workHour^5),data=grind,subset=trainIndex, method = 'forward')
reg.summary = summary(regfit.fwd)
print(reg.summary)
#But how many variables should I choose in the model?
which.max(reg.summary$adjr2)
plot(reg.summary$adjr2,xlab = 'Number of variables', 
     ylab='Adjusted R^2',type = 'l')
points(which.max(reg.summary$adjr2), 
       reg.summary$adjr2[which.max(reg.summary$adjr2)], 
       col='red',cex = 2, pch = 20)


plot(grind$workHour,handleTime)

y = 514.799340 + 78.506762*x - 5.308185*(x^3) + 0.848424*(x^4) - 0.037919*(x^5) 
  
lines(x,y)
plot(workHour,y)

 predy = predict(fit, newdata = uniqueX)

 plot(x,y, type = 'l')

 
head(grind)
uniqueX = unique(grind$workHour) 


x = seq(0,13.5,0.5)
x

hdf[1:50]
